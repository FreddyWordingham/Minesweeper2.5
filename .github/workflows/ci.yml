---
name: Continuous Integration

on:
    push:
        branches:
            - "main"
            - "dev"

jobs:
    macOS-tests:
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os:
                    - macOS-latest
                python-version:
                    - 3.9
            fail-fast: false

        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 2

            - name: Set up Rust
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  components: clippy

            - name: Rust checks
              run: |
                  cargo check
                  cargo clippy

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v1
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Update pip
              run: |
                  python -m ensurepip
                  python -m pip install --upgrade pip

            - name: Configure poetry
              run: |
                  python -m pip install poetry
                  python -m poetry config virtualenvs.in-project true
                  python -m poetry config virtualenvs.create true

            - name: Set up cache
              uses: actions/cache@v2
              id: cache
              with:
                  path: .venv
                  key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pyproject.toml') }}

            - name: Install Package
              run: python -m poetry install

            - name: Quality Assurance
              run: |
                  poetry run flake8 ./app/ --count --select=E9,F63,F7,F82, --ignore=F821 --show-source --statistics
                  poetry run black --diff ./app/

    ubuntu-tests:
        needs: macOS-tests
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os:
                    - ubuntu-latest
                python-version:
                    - 3.9
            fail-fast: false

        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 2

            - name: Set up Rust
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  components: clippy

            - name: Rust checks
              run: |
                  cargo check
                  cargo clippy

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v1
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Update pip
              run: |
                  python -m ensurepip
                  python -m pip install --upgrade pip

            - name: Configure poetry
              run: |
                  python -m pip install poetry
                  python -m poetry config virtualenvs.in-project true
                  python -m poetry config virtualenvs.create true

            - name: Set up cache
              uses: actions/cache@v2
              id: cache
              with:
                  path: .venv
                  key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pyproject.toml') }}

            - name: Install Package
              run: python -m poetry install

            - name: Quality Assurance
              run: |
                  poetry run flake8 ./app/ --count --select=E9,F63,F7,F82, --ignore=F821 --show-source --statistics
                  poetry run black --diff ./app/

    windows-tests:
        needs: ubuntu-tests
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os:
                    - windows-latest
                python-version:
                    - 3.9
            fail-fast: false

        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 2

            - name: Set up Rust
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  components: clippy

            - name: Rust checks
              run: |
                  cargo check
                  cargo clippy

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v1
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Update pip
              run: |
                  python -m ensurepip
                  python -m pip install --upgrade pip

            - name: Configure poetry
              run: |
                  python -m pip install poetry
                  python -m poetry config virtualenvs.in-project true
                  python -m poetry config virtualenvs.create true

            - name: Set up cache
              uses: actions/cache@v2
              id: cache
              with:
                  path: .venv
                  key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pyproject.toml') }}

            - name: Install Package
              run: python -m poetry install

            - name: Quality Assurance
              run: |
                  poetry run flake8 ./app/ --count --select=E9,F63,F7,F82, --ignore=F821 --show-source --statistics
                  poetry run black --diff ./app/

    update-game-release:
        needs: macOS-tests
        runs-on: macOS-latest
        strategy:
            matrix:
                os:
                    - macOS-latest
                python-version:
                    - 3.9
            fail-fast: false

        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 2

            - name: Set up Rust
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable

            - name: Add Rust WASM
              run: rustup target add wasm32-unknown-unknown;

            - name: Set up WASM
              uses: jetli/wasm-bindgen-action@v0.1.0
              with:
                  version: "latest"

            - name: Compile WASM
              run: cargo build --release --target wasm32-unknown-unknown;

            - name: Generate WASM bindings
              run: wasm-bindgen --target web ./target/wasm32-unknown-unknown/release/main.wasm --out-dir ./docs/wasm --no-typescript;

            - name: Update game
              run: |
                  rm -r ./app/static/assets;
                  rm -r ./docs/*;
                  cp ./assets/index.html ./docs;
                  cp -r ./assets ./app/static/;
                  cp -r ./assets ./docs/assets/;
                  cp -r ./app/static/wasm ./docs;

            - name: Commit files
              run: |
                  git add --force docs/*
                  git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
                  git config --local user.name "github-actions[bot]"
                  git commit -m "CI: Automated update push" -a | exit 0

            - name: Push changes
              if: github.ref == 'refs/heads/main'
              uses: ad-m/github-push-action@master
              with:
                  github_token: ${{ secrets.UPDATE }}
